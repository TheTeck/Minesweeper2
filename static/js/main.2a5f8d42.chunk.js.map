{"version":3,"sources":["Components/FlagCounter/FlagCounter.jsx","Components/GameSelect/GameSelect.jsx","Components/NewGameButton/NewGameButton.jsx","Components/Timer/Timer.jsx","Components/Controls/Controls.jsx","Components/Cell/Cell.jsx","Components/GameBoard/GameBoard.jsx","App.js","reportWebVitals.js","index.js"],"names":["FlagCounter","props","id","className","count","GameSelect","value","level","onChange","e","updateLevel","target","NewGameButton","onClick","restartGame","Timer","active","restart","useState","time","setTime","restartPoint","setRestartPoint","padNum","num","useEffect","interval","setInterval","clearInterval","minutes","Math","floor","seconds","updateDisplay","Controls","flags","Cell","handleLeftClick","handleCellClick","cell","x","y","handleRightClick","preventDefault","toggleFlag","style","width","size","height","exposed","detonated","flagged","onContextMenu","CellData","this","flaggedCount","exposedCount","GameBoard","game","updateFlags","isActive","generateGameArray","bombs","board","setBoard","gameOver","setGameOver","gameWon","setGameWon","index","clickedCell","detonate","endGame","exposeMore","expose","forEach","flag","gameboard","Array","j","i","newCell","bombCount","randX","random","randY","populateBombs","populateNumbers","minWidth","minHeight","map","unit","boardData","easy","medium","hard","App","setLevel","setActive","setFlags","setRestart","prev","newLevel","newState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a5f8d42.chunk.js","sourcesContent":["import React from 'react';\n\nimport './FlagCounter.scss';\n\nexport default function FlagCounter (props) {\n    return (\n        <div id=\"flagcounter-container\">\n            <div className=\"material-icons icon-medium\">flag</div>\n            {props.count}\n        </div>\n    )\n}","import React from 'react';\n\nimport './GameSelect.scss';\n\nexport default function GameSelect (props) {\n\n    function handleLevelSelect (e) {\n        props.updateLevel(e.target.value);\n    }\n\n    return (\n        <div id=\"gameselect-container\">\n            <div className=\"material-icons icon-medium\">psychology</div>\n            <select value={props.level} onChange={handleLevelSelect}>\n                <option value=\"easy\">Easy</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"hard\">Hard</option>\n            </select>\n        </div>\n    )\n}","import React from 'react';\n\nimport './NewGameButton.scss';\n\nexport default function NewGameButton (props) {\n\n    function handleRestartClick () {\n        props.restartGame();\n    }\n\n    return (\n        <div id=\"newgamebutton-container\" onClick={handleRestartClick} >\n            <div className=\"material-icons icon-medium\">emoji_emotions</div>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\n\nimport './Timer.scss';\n\nexport default function Timer ({ active, restart }) {\n\n    const [time, setTime] = useState(0);\n    const [restartPoint, setRestartPoint] = useState(0);\n\n    if (restart > restartPoint) {\n        setRestartPoint(restart);\n        setTime(0);\n    }\n\n    function padNum (num) {\n        return num < 10 ? '0' + num : num\n    }\n\n    function updateDisplay () {\n        const minutes = padNum(Math.floor(time/60))\n        const seconds = padNum(Math.floor(time%60))\n        return `${minutes}:${seconds}`\n    }\n\n    useEffect(() => {\n        if (active) {\n            const interval = setInterval(() => {\n                setTime(time + 1)\n            }, 1000)\n\n            return function cleanUp () {\n                clearInterval(interval)\n            }\n        }\n    })\n\n    return (\n        <div id=\"timer-container\">\n            {updateDisplay()}\n        </div>\n    )\n}","import React from 'react';\n\nimport FlagCounter from '../FlagCounter/FlagCounter';\nimport GameSelect from '../GameSelect/GameSelect';\nimport NewGameButton from '../NewGameButton/NewGameButton';\nimport Timer from '../Timer/Timer';\nimport './Controls.scss';\n\nexport default function Controls (props) {\n    return (\n        <div id=\"controls-container\">\n            <div id=\"controls-cluster\">\n                <FlagCounter count={props.flags} />\n                <GameSelect level={props.level} updateLevel={props.updateLevel} />\n                <NewGameButton restartGame={props.restartGame} />\n                <Timer active={props.active} restart={props.restart} /> \n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nimport './Cell.scss';\n\nexport default function Cell (props) {\n\n    function handleLeftClick () {\n        props.handleCellClick(props.cell.x, props.cell.y);\n    }\n\n    function handleRightClick (e) {\n        e.preventDefault();\n        props.toggleFlag(props.cell.x, props.cell.y);\n    }\n\n    return (\n        <div \n            className=\"cell-container\"\n            style={{\n                width: `${props.size}px`,\n                height: `${props.size}px`\n            }}\n        >\n            {\n                !props.cell.exposed ? (props.cell.flagged ? <div onClick={handleLeftClick} onContextMenu={handleRightClick} className=\"unexposed-cell material-icons icon-tiny\">flag</div>\n                : <div onClick={handleLeftClick} onContextMenu={handleRightClick} className=\"unexposed-cell\"></div>)\n                : props.cell.value === 9 ? (props.cell.detonated ? <div className=\"material-icons icon-tiny exploded\">wb_sunny</div>\n                : <div className=\"material-icons icon-tiny\">wb_sunny</div>)\n                : <div className={`cell${props.cell.value}`}> {props.cell.value ? props.cell.value : ''}</div>\n            }\n        </div>\n    )\n}","import React, { useState } from 'react';\n\nimport Cell from '../Cell/Cell';\nimport './GameBoard.scss';\n\n\nclass CellData {\n    static flaggedCount = 0;\n    static exposedCount = 0;\n\n    constructor (x, y) {\n        this.x = x;\n        this.y = y;\n        this.value = 0;\n        this.exposed = false;\n        this.flagged = false;\n        this.detonated = false;\n    }\n\n    flag() {\n        if(this.flagged) {\n            this.flagged = false;\n            CellData.flaggedCount--;\n        } else {\n            this.flagged = true;\n            CellData.flaggedCount++;\n        }\n    }\n\n    detonate() {\n        this.detonated = true;\n    }\n\n    expose() {\n        if (!this.exposed) {\n            this.exposed = true;\n            CellData.exposedCount++;\n        }\n    }\n}\n\nexport default function GameBoard ({ game, updateFlags, restart, isActive }) {\n\n    const [board, setBoard] = useState(generateGameArray(game.x, game.y, game.bombs));\n    const [gameOver, setGameOver] = useState(false);\n    const [gameWon, setGameWon] = useState(false);\n    const [restartPoint, setRestartPoint] = useState(0);\n    const cellSize = 30;\n\n    // Restart button was clicked in controls\n    if (restart > restartPoint) {\n        updateFlags(game.bombs);\n        CellData.flaggedCount = 0;\n        CellData.exposedCount = 0;\n        setBoard(generateGameArray(game.x, game.y, game.bombs));\n        setGameOver(false);\n        setGameWon(false);\n        setRestartPoint(restart);\n        isActive(false);\n    }\n\n    function handleCellClick(x, y) {\n        let index = x + y * game.x;\n        let clickedCell = board[index];\n\n        // If first click, then start clock\n        if (CellData.exposedCount === 0)\n            isActive(true);\n\n        // Can't left click on flagged cells\n        if (clickedCell.flagged)\n            return;\n\n        // Clicked on a bomb or non-bomb cell\n        if (board[x + y * game.x].value === 9) {\n            board[x + y * game.x].detonate();\n            endGame();\n        } else {\n            exposeMore(x, y);\n            setBoard([...board]);\n        }\n\n        // Check if player has won\n        if (game.x * game.y - game.bombs === CellData.exposedCount) {\n            endGame();\n            setGameWon(true);\n        }\n    }\n\n    // Recursively expose all surrounding cells\n    function exposeMore (x, y) {\n        let cell = board[x + y * game.x];\n\n        if (!cell.exposed)\n            cell.expose();\n\n        if (cell.value > 0)\n            return\n\n        if (x > 0 && y > 0 && !board[(x-1) + (y-1) * game.x].exposed)\n            exposeMore(x-1, y-1);\n        if (y > 0 && !board[x + (y-1) * game.x].exposed)\n            exposeMore(x, y-1);\n        if (x < game.x-1 && y > 0 && !board[(x+1) + (y-1) * game.x].exposed)\n            exposeMore(x+1, y-1);\n        if (x < game.x-1 && !board[(x+1) + y * game.x].exposed)\n            exposeMore(x+1, y);\n        if (x < game.x-1 && y < game.y-1 && !board[(x+1) + (y+1) * game.x].exposed)\n            exposeMore(x+1, y+1);\n        if (y < game.y-1 && !board[x + (y+1) * game.x].exposed)\n            exposeMore(x, y+1);\n        if (x > 0 && y < game.y-1 && !board[(x-1) + (y+1) * game.x].exposed)\n            exposeMore(x-1, y+1);\n        if (x > 0 && !board[(x-1) + y * game.x].exposed)\n            exposeMore(x-1, y);\n    }\n\n    // Helper function to indicate end of game an expose the board\n    function endGame () {\n        setGameOver(true)\n        board.forEach(cell => {\n            cell.expose();\n        });\n        setBoard(board);\n        isActive(false);\n    }\n\n    // Right click on cell will turn flag on and off\n    function toggleFlag (x, y) {\n        if (!(!board[x + y * game.x].flagged && CellData.flaggedCount >= game.bombs)) {\n            board[x + y * game.x].flag();\n            updateFlags(game.bombs - CellData.flaggedCount)\n        }\n    }\n\n    // Create array filled with Cells\n    function generateGameArray (x, y, bombs) {\n        let gameboard = new Array(x * y);\n\n        for (let j = 0; j < y; j++) {\n            for (let i = 0; i < x; i++) {\n                let newCell = new CellData(i, j);\n                gameboard[j * x + i] = newCell;\n            }\n        }\n\n        // Fill empty nested array with bombs\n        gameboard = populateBombs(gameboard, x, y, bombs);\n\n        // Fill cells around bombs with numbers\n        gameboard = populateNumbers(gameboard, x, y);\n\n        return gameboard;\n    }\n\n    // Randomly give cells bombs (if they don't have it already)\n    function populateBombs (gameboard, x, y, bombCount) {\n        while (bombCount) {\n            const randX = Math.floor(Math.random() * x);\n            const randY = Math.floor(Math.random() * y);\n\n            if (gameboard[randY * x + randX].value === 0) {\n                gameboard[randY * x + randX].value = 9\n                bombCount--\n            }\n        }\n\n        return gameboard;\n    }\n\n    // Populate the cells with numerical values indicating how many bombs are next to it (9=bomb)\n    // Each surrounding space also gets out-of-bounds checking \n    function populateNumbers(gameboard, x, y) {\n        for (let i = 0; i < x; i++) {\n            for (let j = 0; j < y; j++) {\n                if (gameboard[j * x + i].value !== 9) {\n                    if (j > 0 && i > 0 && gameboard[(j-1) * x + (i-1)].value === 9)\n                        gameboard[j * x + i].value++\n                    if(i > 0 && gameboard[j * x + (i-1)].value === 9)\n                        gameboard[j * x + i].value++\n                    if (i > 0 && j < y-1 && gameboard[(j+1) * x + (i-1)].value === 9)\n                        gameboard[j * x + i].value++\n                    if(j > 0 && gameboard[(j-1) * x + i].value === 9)\n                        gameboard[j * x + i].value++\n                    if(j < y-1 && gameboard[(j+1) * x + i].value === 9)\n                        gameboard[j * x + i].value++\n                    if (j > 0 && i < x-1 && gameboard[(j-1) * x + (i+1)].value === 9)\n                        gameboard[j * x + i].value++\n                    if(i < x-1 && gameboard[j * x + (i+1)].value === 9)\n                        gameboard[j * x + i].value++\n                    if (j < y-1 && i < x-1 && gameboard[(j+1) * x + (i+1)].value === 9)\n                        gameboard[j * x + i].value++\n                }\n            }\n        }\n        return gameboard;\n    }\n\n    return (\n        <div id=\"gameboard-container\">\n            <div \n                id=\"gameboard-area\"\n                style={{\n                    width: `${game.x * (cellSize + 2)}px`,\n                    height: `${game.y * (cellSize + 2)}px`,\n                    minWidth: `${game.x * (cellSize + 2)}px`,\n                    minHeight: `${game.y * (cellSize + 2)}px`\n                }} \n            >\n                {\n                    board.map((unit, index) => {\n                        return <Cell \n                            key={index} \n                            cell={unit} \n                            size={cellSize} \n                            handleCellClick={handleCellClick}\n                            toggleFlag={toggleFlag}    \n                        />\n                    })\n                    \n                }\n                <h1 className=\"result-text\">{\n                    !gameOver ? '' : gameWon ? 'You Won!' : 'You Lost!'\n                }</h1>\n            </div>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\n\nimport Controls from './Components/Controls/Controls';\nimport GameBoard from './Components/GameBoard/GameBoard';\nimport './App.scss';\n\n// Object holding the options for board sizes and bomb count\nconst boardData = {\n  easy: {\n      x: 10,\n      y: 10,\n      bombs: 10\n  },\n  medium: {\n      x: 16,\n      y: 16,\n      bombs: 40\n  },\n  hard: {\n      x: 30,\n      y: 16,\n      bombs: 99\n  }\n}\n\nfunction App() {\n\n  // level will have the values: 'easy', 'medium' or 'hard'\n  const [level, setLevel] = useState('easy');\n  const [active, setActive] = useState(false);\n  const [flags, setFlags] = useState(boardData[level].bombs);\n  const [restart, setRestart] = useState(0);\n\n  function updateLevel (newLevel) {\n    setLevel(newLevel);\n    restartGame();\n  }\n\n  function updateFlags (count) {\n    setFlags(count);\n  }\n\n  function restartGame () {\n    setRestart(prev => prev + 1);\n  }\n\n  function isActive (newState) {\n    setActive(newState);\n  }\n\n  return (\n    <div className=\"App\">\n      <Controls level={level} updateLevel={updateLevel} flags={flags} restartGame={restartGame} active={active} restart={restart} />\n      <GameBoard game={boardData[level]} updateFlags={updateFlags} restart={restart} isActive={isActive} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}